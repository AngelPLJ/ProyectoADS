@page "/productos"
@rendermode InteractiveServer
@using Maphreca.Components.Data
@using Maphreca.Components.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject ProductosContext Db
@using System.Globalization

<PageTitle>Maphreca</PageTitle>

<h3>Lista de productos</h3>
<div class="overflow-auto">
    @if (productos != null && productos.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Codigo))">Código</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.CodigoLote))">Código de Lote</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Nombre))">Nombre</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Precio))">Precio</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Cantidad))">Cantidad</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Fecha))">Fecha de caducidad</th>
                    <th class="hover:bg-green-100" @onclick="() => SortByColumn(nameof(ProductosModel.Descripcion))">Descripción</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in productos)
                {
                    <tr>
                        <td>@item.Codigo</td>
                        <td>@item.CodigoLote</td>
                        <td>@item.Nombre</td>
                        <td>@item.Precio.ToString("C", CultureInfo.GetCultureInfo("es-MX"))</td>
                        <td>@item.Cantidad</td>
                        <td>@item.Fecha.ToString("dd-MM-yyyy")</td>
                        <td>@item.Descripcion</td>
                        <td>
                            <button class="btn btn-primary my-1" @onclick="() => EditarProducto(item)">Editar</button>
                            <button class="btn btn-danger my-1" @onclick="() => EliminarProducto(item)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay productos disponibles.</p>
    }
</div>

<button class="btn btn-success my-2" @onclick="() => NuevoProducto()">Agregar Producto</button>

@code {
    private List<ProductosModel> productos = new List<ProductosModel>();
    private string currentSortColumn;
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await ActualizarListaProductos();
    }

    private async Task ActualizarListaProductos()
    {
        try
        {
            var query = Db.Productos.AsQueryable();

            if (!string.IsNullOrEmpty(currentSortColumn))
            {
                query = sortAscending
                    ? query.OrderBy(e => EF.Property<object>(e, currentSortColumn))
                    : query.OrderByDescending(e => EF.Property<object>(e, currentSortColumn));
            }

            productos = await query.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener productos: {ex.Message}");
        }
    }

    private void NuevoProducto()
    {
        NavigationManager.NavigateTo("nuevo-producto");
    }

    private void EditarProducto(ProductosModel producto)
    {
        NavigationManager.NavigateTo($"/editar-producto/{producto.Id}");
    }

    private async void EliminarProducto(ProductosModel producto)
    {
        try
        {
            Db.Productos.Remove(producto);
            await Db.SaveChangesAsync();
            await ActualizarListaProductos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el producto: {ex.Message}");
        }
    }

    private async void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            sortAscending = true;
        }

        await ActualizarListaProductos();
    }
}
