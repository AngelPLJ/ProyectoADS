@page "/punto-de-venta"
@using Maphreca.Components.Data
@using Maphreca.Components.Models
@using Microsoft.EntityFrameworkCore
@inject ProductosContext Db
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<PageTitle>Maphreca</PageTitle>

<div class="p-6 bg-white rounded-xl shadow-lg flex flex-col space-x-4 py-3 px-3 my-3">
    <h3 class="font-bold text-2xl">Punto de venta - Maphreca</h3>
    <div class="my-1">
        <label>Codigo: </label>
        <input type="text" @bind="codigoBarras" @oninput="HandleBarcodeInput" @onkeydown="HandleBarcodeKeyPress" @ref="codigoBarrasInput" />
    </div>
    <div class="my-1">
        <label>Cantidad: </label>
        <input type="number" @bind="newItemQuantity" />
    </div>
</div>
<div class="overflow-auto p-6 bg-white rounded-xl shadow-lg flex items-center space-x-4 py-3 px-3 my-5">
    <h4>Carrito</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Codigo</th>
                <th>Nombre</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart)
            {
                <tr>
                    <td>@item.Codigo</td>
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                    <td>@(item.Quantity * item.Price)</td>
                    <td><button @onclick="() => RemoveItem(item)">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>
    <h4>Total: @totalCost</h4>
    <button class="btn btn-secondary my-2" @onclick="ClearCart">Borrar carrito</button>
    <button class="btn btn-primary my-2" @onclick="ProcessTransaction">Procesar transacción</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string codigoBarras = string.Empty;
    private int newItemQuantity = 1;  // Default to 1 for quantity
    private List<CartItem> cart = new();
    private decimal totalCost;
    private List<ProductosModel> Producto;
    private string errorMessage;
    private ElementReference codigoBarrasInput;

    private async Task AddItem(string codigoLeido)
    {
        if (!string.IsNullOrWhiteSpace(codigoLeido))
        {
            try
            {
                Producto = await Db.Productos
                    .Where(p => p.Codigo == codigoLeido)
                    .ToListAsync();

                if (Producto.Any())
                {
                    var existingItem = cart.FirstOrDefault(item => item.Codigo == codigoLeido);
                    if (existingItem != null)
                    {
                        existingItem.Quantity += 1; // Increment quantity by 1
                    }
                    else
                    {
                        if (newItemQuantity > 0)
                        {
                            var item = new CartItem
                            {
                                Codigo = codigoLeido,
                                Name = Producto[0].Nombre,
                                Quantity = newItemQuantity,
                                Price = Producto[0].Precio
                            };

                            cart.Add(item);
                        }
                        else
                        {
                            errorMessage = "La cantidad debe ser mayor que cero.";
                        }
                    }

                    CalculateTotalCost();
                    codigoBarras = string.Empty;
                    newItemQuantity = 1;  // Reset to 1 for the next item
                    errorMessage = string.Empty; // Clear error message

                    // Give focus back to the input field
                    await JSRuntime.InvokeVoidAsync("setFocus", codigoBarrasInput);
                }
                else
                {
                    errorMessage = "El código de barras no coincide con ningún producto.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al guardar los cambios: {ex.Message}";
            }
        }
        else
        {
            errorMessage = "El código de barras no puede estar vacío.";
        }
    }

    private void HandleBarcodeInput(ChangeEventArgs e)
    {
        codigoBarras = e.Value.ToString();
    }

    private async Task HandleBarcodeKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddItem(codigoBarras.Trim());
        }
    }

    private void RemoveItem(CartItem item)
    {
        cart.Remove(item);
        CalculateTotalCost();
    }

    private void ClearCart()
    {
        cart.Clear();
        CalculateTotalCost();
    }

    private void ProcessTransaction()
    {
        // Process the transaction (e.g., print receipt)
    }

    private void CalculateTotalCost()
    {
        totalCost = cart.Sum(item => item.Quantity * item.Price);
    }

    private class CartItem
    {
        public string Codigo { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}
